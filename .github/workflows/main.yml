name: GPT Code Review

 on:

   pull_request:

     types: [opened, synchronize, reopened]

   workflow_dispatch:

 jobs:

   code_review:

     runs-on: ubuntu-latest

     steps:

       - name: Checkout Repository

         uses: actions/checkout@v2

         with:

           fetch-depth: 0

       - name: Cache Python Packages

         uses: actions/cache@v3

         with:

           path: ~/.cache/pip

           key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}

           restore-keys: |

             ${{ runner.os }}-pip-

       - name: Install Dependencies

         run: |

           python -m pip install --upgrade pip

           pip install -r requirements.txt

       - name: Cache Ollama

         id: cache-ollama

         uses: actions/cache@v3

         with:

           path: |

             ~/.ollama

             /usr/local/bin/ollama

           key: ollama-${{ hashFiles('ollama-version.txt') }}-${{ hashFiles('model-name.txt') }}

           restore-keys: |

             ollama-

       - name: Install Ollama

         if: steps.cache-ollama.outputs.cache-hit != 'true'

         run: |

           curl -fsSL https://ollama.com/install.sh | sudo -E sh

       - name: Start Ollama Service

         run: |

           nohup ollama serve &

           sleep 5

           curl -i http://localhost:11434

       - name: Cache Llama3 Model

         id: cache-model

         uses: actions/cache@v3

         with:

           path: ~/.ollama/models/llama3

           key: llama3-model-${{ hashFiles('ollama-version.txt') }}-${{ hashFiles('model-name.txt') }}

           restore-keys: |

             llama3-model-

       - name: Pull Llama3 Model

         if: steps.cache-model.outputs.cache-hit != 'true'

         run: |

           ollama pull llama3

       - name: Fetch Base Branch

         run: git fetch origin main:main

       - name: Get Changed Files

         id: changed-files

         uses: tj-actions/changed-files@v34

       - name: List All Changed Files

         run: |

           for file in ${{ steps.changed-files.outputs.all_changed_files }}; do

             echo "$file was changed"

           done

       - name: Create Diffs Directory

         run: mkdir -p diffs

       - name: Get File Diffs

         run: |

           changed_files="${{ steps.changed-files.outputs.all_changed_files }}"

           echo "Generating diffs for: $changed_files"

           for file in $changed_files; do

             dir_name=$(dirname "$file")

             mkdir -p "diffs/$dir_name"

             if git diff origin/main -- "$file" > "diffs/$file.diff"; then

               echo "Diff for $file generated successfully."

             else

               echo "No diff generated for $file. Skipping."

               rm -f "diffs/$file.diff"

             fi

           done

       - name: Run Python Script

         run: |

           changed_files="${{ steps.changed-files.outputs.all_changed_files }}"

           python3 chatbot.py "$changed_files"

           cat reviews.txt

       - name: Get Latest Commit ID

         id: get_commit

         run: echo "commit_id=$(git rev-parse HEAD)" >> $GITHUB_ENV

       - name: Install Octokit

         run: npm install @octokit/core

       - name: Add Code Suggestions Comments

         env:

           COMMIT_ID: ${{ github.event.pull_request.head.sha }}

           GITHUB_REPOSITORY: ${{ github.repository }}

           GITHUB_EVENT_NUMBER: ${{ github.event.number }}

           GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}

         run: |

           commit_id=${{ env.commit_id }}

           file_names=()

           diff=""

           review=""

           # Read from the file reviews.txt

           while IFS= read -r line; do

             if [[ $line == "FILE: "* ]]; then

                 file_names+=("${line#FILE: }")

             elif [[ $line == "DIFF: "* ]]; then

               diff=""

               while IFS= read -r diff_line; do

                   [[ $diff_line == "ENDDIFF" ]] && break

                   diff+="$diff_line"$'\n'

               done

             elif [[ $line == "REVIEW: "* ]]; then

                 review=""

                 while IFS= read -r review_line; do

                     [[ $review_line == "ENDREVIEW" ]] && break

                     review+="$review_line"$'\n'

                 done

                 # Write the review to aux.txt

                 echo -e "$review" >> aux.txt

                 # Display the content of aux.txt

                 cat aux.txt
 
                escaped_comments=$(echo "$(cat aux.txt)" | jq -s -R -r @json)
 
                parsed_values=$(python3 parse_diff.py <<< "$diff")

                 start_line=$(echo "$parsed_values" | awk '{print $1}')

                 line=$(echo "$parsed_values" | awk '{print $2}')

                 start_side=$(echo "$parsed_values" | awk '{print $3}')

                 side=$(echo "$parsed_values" | awk '{print $4}')

                 node post-comments.js "$escaped_comments" "${{ github.event.pull_request.head.sha }}" "${file_names[-1]}" "$start_line" "$line" "$start_side" "$side"
 
                > aux.txt

             fi

           done < reviews.txt
